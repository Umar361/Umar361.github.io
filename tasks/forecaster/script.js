var TITLE = 'Fuel Price Forecaster';

// x-axis label and label in tooltip
var X_AXIS = 'Months';

// y-axis label and label in tooltip
var Y_AXIS = 'Prices'; 

// Should y-axis start from 0? `true` or `false`
var BEGIN_AT_ZERO = false;

// `true` to show the grid, `false` to hide
var SHOW_GRID = true;

 // `true` to show the legend, `false` to hide
var SHOW_LEGEND = true;

var datasets;

var currentYear = new Date().getFullYear();
var currentYearBk = new Date().getFullYear();

var timeLabels = ['jan', 'feb', 'march', 'APril', 'may', 'jun', 'july', 'august', 'sep', 'oct', 'nov', 'dec'];




// Read data file with random string generated by current time
// to bypass browser cache, and create chart
fetch('./data.json')
  .then((response) => response.json())
  .then((json) => {
      datasets = json;
      createChart(currentYear);
      
  });

function createChart(year) {
  document.getElementById('year').innerHTML = year;
  document.getElementById('chart-container').remove();
  document.getElementById('graph-container').insertAdjacentHTML('beforeend',`<canvas id="chart-container" style="height: 400px; width: 100%"></canvas>`);
   var currentData = datasets[year];
   var chartDataset = [];
   chartDataset.push(
      {
        label: 'solid', // column name
        data: currentData.map(function(row) {return row['solid']}), // data in that column
        fill: false // `true` for area charts, `false` for regular line charts
      }
    )
    chartDataset.push(
      {
        label: 'liquid', // column name
        data: currentData.map(function(row) {return row['liquid']}), // data in that column
        fill: false // `true` for area charts, `false` for regular line charts
      }
    )

    chartDataset.push(
      {
        label: 'gas', // column name
        data: currentData.map(function(row) {return row['gas']}), // data in that column
        fill: false // `true` for area charts, `false` for regular line charts
      }
    )

    chartDataset.push(
      {
        label: 'eletric', // column name
        data: currentData.map(function(row) {return row['eletric']}), // data in that column
        fill: false // `true` for area charts, `false` for regular line charts
      }
    )
   console.log(chartDataset);
   // Get container for the chart
   var ctx = document.getElementById('chart-container').getContext('2d');

   new Chart(ctx, {
     type: 'line',

     data: {
       labels: timeLabels,
       datasets: chartDataset,
     },
     
     options: {
       title: {
         display: true,
         text: TITLE,
         fontSize: 14,
       },
       legend: {
         display: SHOW_LEGEND,
       },
       maintainAspectRatio: false,
       scales: {
         xAxes: [{
          beginAtZero: false,
           scaleLabel: {
             display: X_AXIS !== '',
             labelString: X_AXIS
           },
           gridLines: {
             display: SHOW_GRID,
           },
           ticks: {
             maxTicksLimit: 12,
             callback: function(value, index, values) {
               return value.toLocaleString();
             }
           }
         }],
         yAxes: [{
           stacked: false, // `true` for stacked area chart, `false` otherwise
           beginAtZero: true,
           scaleLabel: {
             display: Y_AXIS !== '',
             labelString: Y_AXIS
           },
           gridLines: {
             display: SHOW_GRID,
           },
           ticks: {
             maxTicksLimit: 10,
             beginAtZero: BEGIN_AT_ZERO,
             callback: function(value, index, values) {
               return value.toLocaleString()
             }
           }
         }]
       },
       tooltips: {
         displayColors: false,
         callbacks: {
           label: function(tooltipItem, all) {
             return all.datasets[tooltipItem.datasetIndex].label
               + ': ' + tooltipItem.yLabel.toLocaleString();
           }
         }
       },
       plugins: {
         colorschemes: {
           /*
             Replace below with any other scheme from
             https://nagix.github.io/chartjs-plugin-colorschemes/colorchart.html
           */
           scheme: 'brewer.DarkTwo5'
         }
       }
     }
   });
}

document.getElementById('pastcast').addEventListener('click', function() {
  if(currentYear == 1996) {
    alert("You cannot scroll less than 1996");
    return false;
  }
  currentYear = parseFloat(currentYear) - 1;
  createChart(currentYear);
})

document.getElementById('forcast').addEventListener('click', function() {
  if(currentYear >= parseFloat(currentYearBk)) {
    alert("Maximum Limit reached");
    return false;
  }
  currentYear = parseFloat(currentYear) + 1;
  createChart(currentYear);
})


    

    

