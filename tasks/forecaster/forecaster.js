var TITLE = 'Fuel Prices';

// x-axis label and label in tooltip
var X_AXIS = 'Months';

// y-axis label and label in tooltip
var Y_AXIS = 'Prices'; 

// Should y-axis start from 0? `true` or `false`
var BEGIN_AT_ZERO = false;

// `true` to show the grid, `false` to hide
var SHOW_GRID = true;

 // `true` to show the legend, `false` to hide
var SHOW_LEGEND = true;

var datasets;

var currentYear = 2022;
var currentYearBk = 2022;

var timeLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
const title = document.querySelector('.title');
const previous = document.querySelector('#previous');
const next = document.querySelector('#next');


// Read data file with random string generated by current time
// to bypass browser cache, and create chart
fetch('https://umar361.github.io/tasks/forecaster/data.json')
  .then((response) => response.json())
  .then((json) => {
      datasets = json;
      createChart(currentYear);
      
  });

function createChart(year) {
  title.innerHTML = `UK's Fuel Prices for calender year ${currentYear}`;
  previous.innerHTML = `< ${currentYear-1}`;
  next.innerHTML = `${currentYear+1} >`;
  // next.hidden = year == currentYear
  document.getElementById('chart-container').remove();
  document.getElementById('graph-container').insertAdjacentHTML('beforeend',`<canvas id="chart-container" style="height: 400px; width: 100%"></canvas>`);
   var currentData = datasets[year];
   var chartDataset = [];
   chartDataset.push(
      {
        label: 'solid', // column name
        data: currentData.map(function(row) {return row['solid']}), // data in that column
        fill: false // `true` for area charts, `false` for regular line charts
      }
    )
    chartDataset.push(
      {
        label: 'liquid', // column name
        data: currentData.map(function(row) {return row['liquid']}), // data in that column
        fill: false // `true` for area charts, `false` for regular line charts
      }
    )

    chartDataset.push(
      {
        label: 'gas', // column name
        data: currentData.map(function(row) {return row['gas']}), // data in that column
        fill: false // `true` for area charts, `false` for regular line charts
      }
    )

    chartDataset.push(
      {
        label: 'eletric', // column name
        data: currentData.map(function(row) {return row['eletric']}), // data in that column
        fill: false // `true` for area charts, `false` for regular line charts
      }
    )
   // Get container for the chart
   var ctx = document.getElementById('chart-container').getContext('2d');

   new Chart(ctx, {
     type: 'line',

     data: {
       labels: timeLabels,
       datasets: chartDataset,
     },
     
     options: {
       title: {
         display: true,
         text: TITLE,
         fontSize: 14,
       },
       legend: {
         display: SHOW_LEGEND,
       },
       maintainAspectRatio: false,
       scales: {
         xAxes: [{
          beginAtZero: false,
           scaleLabel: {
             display: X_AXIS !== '',
             labelString: X_AXIS
           },
           gridLines: {
             display: SHOW_GRID,
           },
           ticks: {
             maxTicksLimit: 12,
             callback: function(value, index, values) {
               return value.toLocaleString();
             }
           }
         }],
         yAxes: [{
           stacked: false, // `true` for stacked area chart, `false` otherwise
           beginAtZero: true,
           scaleLabel: {
             display: Y_AXIS !== '',
             labelString: Y_AXIS
           },
           gridLines: {
             display: SHOW_GRID,
           },
           ticks: {
             maxTicksLimit: 10,
             beginAtZero: BEGIN_AT_ZERO,
             callback: function(value, index, values) {
               return value.toLocaleString()
             }
           }
         }]
       },
       tooltips: {
         displayColors: false,
         callbacks: {
           label: function(tooltipItem, all) {
             return all.datasets[tooltipItem.datasetIndex].label
               + ': ' + tooltipItem.yLabel.toLocaleString();
           }
         }
       },
       plugins: {
         colorschemes: {
           /*
             Replace below with any other scheme from
             https://nagix.github.io/chartjs-plugin-colorschemes/colorchart.html
           */
           scheme: 'brewer.DarkTwo5'
         }
       }
     }
   });
}

document.getElementById('previous').addEventListener('click', function() {
  if(currentYear == 1996) {
    document.querySelector(".result_span").innerHTML = `No data available for ${currentYear-1}`
    return false;
  }else{
    document.querySelector(".result_span").innerHTML = ``
  }
  currentYear = parseFloat(currentYear) - 1;
  createChart(currentYear);
})

document.getElementById('next').addEventListener('click', function() {
  if(currentYear >= parseFloat(currentYearBk)) {
    document.querySelector(".result_span").innerHTML = `No data available for ${currentYear+1}`
    return false;
  }else{
    document.querySelector(".result_span").innerHTML = ``
  }
  currentYear = parseFloat(currentYear) + 1;
  createChart(currentYear);
})

document.getElementById('history').addEventListener('click', function() {

  var history = document.getElementById("history");
  history.classList.add("active");
  history.classList.remove("inactive");
  var forecast = document.getElementById("forecast");
  forecast.classList.add("inactive");
  forecast.classList.remove("active");
  var moveButtons = document.getElementById("result");
  moveButtons.style.display = 'flex';
  var moveButtons = document.getElementById("tableContainer");
  moveButtons.style.display = 'none';
  var chart = document.getElementById("chart_parent");
  chart.style.display = 'block';
  createChart(currentYear)
})

document.getElementById('forecast').addEventListener('click', function() {
  var forecast = document.getElementById("forecast");
  forecast.classList.add("active");
  forecast.classList.remove("inactive");
  var history = document.getElementById("history");
  history.classList.add("inactive");
  history.classList.remove("active");
  var moveButtons = document.getElementById("result");
  moveButtons.style.display = 'none';
  var chart = document.getElementById("chart_parent");
  chart.style.display = 'none';
  var table = document.getElementById("tableContainer");
  table.style.display = 'block' ;
  currentYear = 2022;
  title.innerHTML = `Fuel Prices forcast for calender year ${currentYear}`;
  // createChart(currentYear);
  populateTable()
})

const trGas = document.querySelector('#trGas');
const trLiquid = document.querySelector('#trLiquid');
const trSolid = document.querySelector('#trSolid');
const trElectric = document.querySelector('#trElectric');
let tablePopulated = false
function populateTable(){
  if(tablePopulated)
    return
  const lastyear = datasets["2021"]
  const thisYear = datasets["2022"]
  let solidSum = 0;
  let liquidSum = 0;
  let gasSum = 0;
  let electricSum = 0;
  let solidMin = lastyear[0].solid;
  let solidMax = lastyear[0].solid;
  let liquidMin = lastyear[0].liquid;
  let liquidMax = lastyear[0].liquid;
  let gasMin = lastyear[0].gas;
  let gasMax = lastyear[0].gas;
  let elecMin = lastyear[0].eletric;
  let elecMax = lastyear[0].eletric;
  let solidDiff = 0;
  let liquidDiff = 0;
  let gasDiff = 0;
  let elecDiff = 0;
  for(var i=0;i<12;i++){
    solidMin = lastyear[i].solid<solidMin ? lastyear[i].solid: solidMin
    solidMax = lastyear[i].solid>solidMax ? lastyear[i].solid: solidMax
    liquidMax = lastyear[i].liquid>liquidMax ? lastyear[i].liquid: liquidMax
    liquidMin = lastyear[i].liquid<liquidMin ? lastyear[i].liquid: liquidMin
    gasMax = lastyear[i].gas>gasMax ? lastyear[i].gas: gasMax
    gasMin = lastyear[i].gas<gasMin ? lastyear[i].gas: gasMin
    elecMax = lastyear[i].eletric>elecMax ? lastyear[i].eletric: elecMax
    elecMin = lastyear[i].eletric<elecMin ? lastyear[i].eletric: elecMin
    solidSum += lastyear[i].solid
    liquidSum += lastyear[i].liquid
    gasSum += lastyear[i].gas
    electricSum += lastyear[i].eletric
  }
  console.log(electricSum, elecMax, elecMin)
  solidDiff = ((solidMax - solidMin)/solidMax)*100
  liquidDiff = ((liquidMax - liquidMin)/liquidMax)*100
  gasDiff = ((gasMax - gasMin)/gasMax)*100
  elecDiff = ((elecMax - elecMin)/elecMax)*100
  for(var i=0;i<12;i++){
    var td = document.createElement('td');
    td.innerHTML = (lastyear[i].solid+solidDiff).toFixed(2);
    trSolid.appendChild(td);
    td = document.createElement('td');
    td.innerHTML = (lastyear[i].liquid+liquidDiff).toFixed(2);
    trLiquid.appendChild(td);
    td = document.createElement('td');
    td.innerHTML = (lastyear[i].gas+gasDiff).toFixed(2);
    trGas.appendChild(td);
    td = document.createElement('td');
    td.innerHTML = (lastyear[i].eletric+elecDiff).toFixed(2);
    trElectric.appendChild(td);
  }
  tablePopulated = true
}


    

